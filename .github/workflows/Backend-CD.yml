name: Backend CD

on:
  push:
    #branches: [ main ]
    paths:
    #  - 'backend/**'
  pull_request:
    paths:
    #   - 'backend/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: settlyai-backend
  IMAGE_TAG: latest
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}


jobs:
  deploy-backend:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and Build
        run: |
          dotnet restore backend.sln
          dotnet build backend.sln --no-restore --configuration Release

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: backend-deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    #   - name: Run EF Core Migrations on RDS
    #     run: |
    #       dotnet ef database update --project SettlyApi/SettlyApi.csproj --startup-project SettlyApi/SettlyApi.csproj --configuration Release
    #     env:
    #       ConnectionStrings__DefaultConnection: ${{ secrets.RDS_CONNECTION_STRING }}
     
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }} # Replace with your EC2 public IP, this ip will change if you stop and start the instance!!!!!!
          username: ec2-user
          key: ${{ secrets.EC2_KEY_PAIR }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker stop backend || true && docker rm backend || true
            docker run -d --name backend -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}