name: Backend CD

on:
  push:
    #branches: [ main ]
    paths:
    #  - 'backend/**'
  pull_request:
    paths:
    #   - 'backend/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: settlyai-backend
  IMAGE_TAG: latest
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}


jobs:
  deploy-backend:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and Build
        run: |
          dotnet restore backend.sln
          dotnet build backend.sln --no-restore --configuration Release

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: backend-deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # === 新增：把 backend 源码同步到 EC2 的 /srv/settly（给 SSM 里 dotnet ef 使用）===
      - name: Sync backend source to EC2 (/srv/settly)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY_PAIR }}
          source: "./"             # 以“backend/”为工作目录，整个 backend 目录会上传
          target: "/srv/settly"
          rm: true                 # 先清空目标目录，避免老文件干扰
          overwrite: true
          strip_components: 0
        # 如你的 EC2 用户不是 ec2-user，或路径不同，请相应调整

      # === 新增：用 SSM 在 EC2 内执行迁移（Pre-deploy）===
      - name: Apply EF Core migrations via SSM (Pre-deploy)
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          RDS_CONN: ${{ secrets.RDS_CONNECTION_STRING }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          set -euo pipefail

          # 在 EC2 上通过 SSM 执行迁移
          CMD="export ApiConfigs__DBConnection=\"$RDS_CONN\"; \
              export ASPNETCORE_ENVIRONMENT=Production; \
              docker pull mcr.microsoft.com/dotnet/sdk:8.0; \
              docker run --rm \
                -e ApiConfigs__DBConnection=\"$RDS_CONN\" \
                -e ASPNETCORE_ENVIRONMENT=Production \
                -v /srv/settly:/src \
                mcr.microsoft.com/dotnet/sdk:8.0 \
                bash -lc 'dotnet tool install -g dotnet-ef --version 8.0.7; \
                          export PATH=\$PATH:/root/.dotnet/tools; \
                          cd /src/SettlyModels; \
                          dotnet ef database update --startup-project ../SettlyApi'"

          # 发送 SSM 命令
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$EC2_INSTANCE_ID" \
            --parameters "commands=$CMD" \
            --comment "Run EF Core migrations" \
            --region "$AWS_REGION"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}   # 注意：如果重启实例这个IP会变
          username: ec2-user
          key: ${{ secrets.EC2_KEY_PAIR }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker stop backend || true && docker rm backend || true
            docker run -d --name backend -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}