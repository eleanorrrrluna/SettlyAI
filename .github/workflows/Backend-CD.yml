name: Backend CD

on:
  push:
    #branches: [ main ]
    paths:
    #  - 'backend/**'
  pull_request:
    paths:
    #   - 'backend/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: settlyai-backend
  IMAGE_TAG: latest
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}


jobs:
  deploy-backend:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and Build
        run: |
          dotnet restore backend.sln
          dotnet build backend.sln --no-restore --configuration Release

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: backend-deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Apply EF Core migrations (Pre-deploy)
        env:
          RDS_CONN: ${{ secrets.RDS_CONNECTION_STRING }}
          ASPNETCORE_ENVIRONMENT: Production
        run: |
          docker run --rm --pull=always \
            -e "ApiConfigs__DBConnection=$RDS_CONN" \
            -e "ASPNETCORE_ENVIRONMENT=Production" \
            -v "$PWD":/src \
            mcr.microsoft.com/dotnet/sdk:8.0 \
            bash -lc '
              set -euo pipefail
              # 如仓库根有 .config/dotnet-tools.json：
              dotnet tool restore || true

              # 若没有 tool manifest，临时全局安装（版本改成和你们 EF Core 匹配的）：
              if ! command -v dotnet-ef >/dev/null; then
                dotnet tool install -g dotnet-ef --version 8.0.7
                export PATH="$PATH:/root/.dotnet/tools"
              fi

              # RDS 可能刚切网，做一个连接重试（无需 sleep 固定秒）
              for i in {1..30}; do
                # 试编译一次以尽快发现项目问题
                dotnet build /src/SettlyApi/SettlyApi.csproj -c Release && break || true
                echo "retry build $i/30..." && sleep 2
              done

              cd /src/SettlyModels
              # 迁移：启动项目为 SettlyApi，这样会读取 ApiConfigs__DBConnection
              dotnet ef database update --startup-project ../SettlyApi
            '

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }} # Replace with your EC2 public IP, this ip will change if you stop and start the instance!!!!!!
          username: ec2-user
          key: ${{ secrets.EC2_KEY_PAIR }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker stop backend || true && docker rm backend || true
            docker run -d --name backend -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}