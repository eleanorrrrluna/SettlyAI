// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SettlyModels;

#nullable disable

namespace SettlyModels.Migrations
{
    [DbContext(typeof(SettlyDbContext))]
    [Migration("20250912045825_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SettlyModels.Entities.ChatLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsUser")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatLogs");
                });

            modelBuilder.Entity("SettlyModels.Entities.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("SettlyModels.Entities.HousingMarket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ClearanceRate")
                        .HasColumnType("numeric");

                    b.Property<int>("DaysOnMarket")
                        .HasColumnType("integer");

                    b.Property<int>("MedianPrice")
                        .HasColumnType("integer");

                    b.Property<int>("MedianRent")
                        .HasColumnType("integer");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.Property<decimal>("PopulationGrowthRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceGrowth3Yr")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RentGrowth12M")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RentalYield")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StockOnMarket")
                        .HasColumnType("integer");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.Property<decimal>("VacancyRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("HousingMarkets");
                });

            modelBuilder.Entity("SettlyModels.Entities.IncomeEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EmploymentRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("JobGrowthRate")
                        .HasColumnType("numeric");

                    b.Property<int>("MedianIncome")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.Property<decimal>("WhiteCollarRatio")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("IncomeEmployments");
                });

            modelBuilder.Entity("SettlyModels.Entities.InspectionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("InspectionPlans");
                });

            modelBuilder.Entity("SettlyModels.Entities.Livability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("HospitalDensity")
                        .HasColumnType("numeric");

                    b.Property<int>("HospitalQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrimarySchoolRating")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SecondarySchoolRating")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.Property<int>("SupermarketQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransportScore")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("Livabilities");
                });

            modelBuilder.Entity("SettlyModels.Entities.LoanCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFee")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepositAmount")
                        .HasColumnType("integer");

                    b.Property<string>("DifferenceNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FixedMonthly")
                        .HasColumnType("integer");

                    b.Property<int>("Income")
                        .HasColumnType("integer");

                    b.Property<int>("InspectionFees")
                        .HasColumnType("integer");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<int>("LegalFees")
                        .HasColumnType("integer");

                    b.Property<int>("LoanAmount")
                        .HasColumnType("integer");

                    b.Property<int>("LoanTermYears")
                        .HasColumnType("integer");

                    b.Property<int>("MonthlyRepayment")
                        .HasColumnType("integer");

                    b.Property<int>("OtherUpfrontCosts")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("RepaymentToIncomeRatio")
                        .HasColumnType("numeric");

                    b.Property<string>("RepaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StampDuty")
                        .HasColumnType("integer");

                    b.Property<decimal>("StressInterestRate")
                        .HasColumnType("numeric");

                    b.Property<int>("StressMonthlyRepayment")
                        .HasColumnType("integer");

                    b.Property<string>("StressResultNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalCost")
                        .HasColumnType("integer");

                    b.Property<int>("TotalInterest")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VariableMonthly")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("LoanCalculations");
                });

            modelBuilder.Entity("SettlyModels.Entities.PolicyRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Eligibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SuburbId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("PolicyRules");
                });

            modelBuilder.Entity("SettlyModels.Entities.PopulationSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingApprovals12M")
                        .HasColumnType("integer");

                    b.Property<decimal>("DemandSupplyRatio")
                        .HasColumnType("numeric");

                    b.Property<int>("DevProjectsCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("RentersRatio")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("PopulationSupplies");
                });

            modelBuilder.Entity("SettlyModels.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<int>("CarSpaces")
                        .HasColumnType("integer");

                    b.Property<string[]>("Features")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InspectionTimeOptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InternalArea")
                        .HasColumnType("integer");

                    b.Property<int>("LandSize")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("SettlyModels.Entities.RiskDevelopment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CrimeRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("RiskDevelopments");
                });

            modelBuilder.Entity("SettlyModels.Entities.SettlyAIScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AffordabilityScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GrowthPotentialScore")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SuburbId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuburbId");

                    b.ToTable("SettlyAIScores");
                });

            modelBuilder.Entity("SettlyModels.Entities.Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Return10Y")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Return1Y")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Return3Y")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Return5Y")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("SuperFunds");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentAge")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("integer");

                    b.Property<decimal>("EmployerContributionRate")
                        .HasColumnType("numeric");

                    b.Property<int>("RetirementAge")
                        .HasColumnType("integer");

                    b.Property<int>("Salary")
                        .HasColumnType("integer");

                    b.Property<bool>("UseFhss")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SuperProjectionInputs");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionInsight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InputId")
                        .HasColumnType("integer");

                    b.Property<string>("RecommendationNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SummaryNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InputId")
                        .IsUnique();

                    b.ToTable("SuperProjectionInsights");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BalanceWithFhss")
                        .HasColumnType("integer");

                    b.Property<int>("BalanceWithoutFhss")
                        .HasColumnType("integer");

                    b.Property<int>("FhssWithdrawableAmount")
                        .HasColumnType("integer");

                    b.Property<int>("InputId")
                        .HasColumnType("integer");

                    b.Property<int>("NetDifference")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectedBalanceAtRetirement")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InputId")
                        .IsUnique();

                    b.ToTable("SuperProjectionResults");
                });

            modelBuilder.Entity("SettlyModels.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SettlyModels.Entities.UserFundSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FundId")
                        .HasColumnType("integer");

                    b.Property<int>("InputId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.HasIndex("InputId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFundSelections");
                });

            modelBuilder.Entity("SettlyModels.Entities.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VerificationType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("SettlyModels.Entities.ChatLog", b =>
                {
                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("ChatLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.Favourite", b =>
                {
                    b.HasOne("SettlyModels.Entities.Property", null)
                        .WithMany("Favourites")
                        .HasForeignKey("PropertyId");

                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.HousingMarket", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("HousingMarkets")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.IncomeEmployment", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("IncomeEmployments")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.InspectionPlan", b =>
                {
                    b.HasOne("SettlyModels.Entities.Property", "Property")
                        .WithMany("InspectionPlans")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("InspectionPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.Livability", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("Livabilities")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.LoanCalculation", b =>
                {
                    b.HasOne("SettlyModels.Entities.Property", "Property")
                        .WithMany("LoanCalculations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("LoanCalculations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.PolicyRule", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.PopulationSupply", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("PopulationSupplies")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.Property", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("Properties")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.RiskDevelopment", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("RiskDevelopments")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.SettlyAIScore", b =>
                {
                    b.HasOne("SettlyModels.Entities.Suburb", "Suburb")
                        .WithMany("SettlyAIScores")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionInput", b =>
                {
                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("SuperProjectionInputs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionInsight", b =>
                {
                    b.HasOne("SettlyModels.Entities.SuperProjectionInput", "Input")
                        .WithOne("Insight")
                        .HasForeignKey("SettlyModels.Entities.SuperProjectionInsight", "InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Input");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionResult", b =>
                {
                    b.HasOne("SettlyModels.Entities.SuperProjectionInput", "Input")
                        .WithOne("Result")
                        .HasForeignKey("SettlyModels.Entities.SuperProjectionResult", "InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Input");
                });

            modelBuilder.Entity("SettlyModels.Entities.UserFundSelection", b =>
                {
                    b.HasOne("SettlyModels.Entities.SuperFund", "Fund")
                        .WithMany("UserFundSelections")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SettlyModels.Entities.SuperProjectionInput", "Input")
                        .WithMany("FundSelections")
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("UserFundSelections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");

                    b.Navigation("Input");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.Verification", b =>
                {
                    b.HasOne("SettlyModels.Entities.User", "User")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettlyModels.Entities.Property", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("InspectionPlans");

                    b.Navigation("LoanCalculations");
                });

            modelBuilder.Entity("SettlyModels.Entities.Suburb", b =>
                {
                    b.Navigation("HousingMarkets");

                    b.Navigation("IncomeEmployments");

                    b.Navigation("Livabilities");

                    b.Navigation("PopulationSupplies");

                    b.Navigation("Properties");

                    b.Navigation("RiskDevelopments");

                    b.Navigation("SettlyAIScores");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperFund", b =>
                {
                    b.Navigation("UserFundSelections");
                });

            modelBuilder.Entity("SettlyModels.Entities.SuperProjectionInput", b =>
                {
                    b.Navigation("FundSelections");

                    b.Navigation("Insight");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("SettlyModels.Entities.User", b =>
                {
                    b.Navigation("ChatLogs");

                    b.Navigation("EmailVerifications");

                    b.Navigation("Favourites");

                    b.Navigation("InspectionPlans");

                    b.Navigation("LoanCalculations");

                    b.Navigation("SuperProjectionInputs");

                    b.Navigation("UserFundSelections");
                });
#pragma warning restore 612, 618
        }
    }
}
