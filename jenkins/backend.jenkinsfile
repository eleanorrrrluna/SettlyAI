pipeline {
  agent any

  environment {
    AWS_REGION        = 'ap-southeast-2'
    ECR_REPOSITORY    = 'settlyai-backend'
    IMAGE_TAG         = 'latest'
    WORKDIR           = 'backend'
    TARGET_DIR        = '/srv/settly'
    EC2_INSTANCE_ID   = credentials('EC2_INSTANCE_ID')  // 在 Jenkins credentials 添加
    RDS_CONN          = credentials('RDS_CONNECTION_STRING')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Setup .NET') {
      steps {
        dir("${WORKDIR}") {
          sh '''
            export PATH="$PATH:$HOME/.dotnet/tools"
            dotnet --info
            dotnet tool install -g dotnet-ef || true
          '''
        }
      }
    }

    stage('Build & Test') {
      steps {
        dir("${WORKDIR}") {
          sh '''
            dotnet restore
            dotnet build backend.sln --configuration Release
            dotnet test backend.sln --logger "trx;LogFileName=test-results.trx" --results-directory TestResults
          '''
        }
      }
      post {
        always {
          junit testResults: "${WORKDIR}/TestResults/*.trx", allowEmptyResults: true
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        dir("${WORKDIR}") {
          sh '''
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            aws ecr get-login-password --region ${AWS_REGION} \
              | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
            docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          '''
        }
      }
    }

    stage('Apply DB Migrations via SSM') {
      steps {
        dir("${WORKDIR}") {
          sh '''
            set -euo pipefail
            cat >/tmp/ssm-params.json <<'JSON'
            {
              "commands": [
                "export ASPNETCORE_ENVIRONMENT=Production",
                "export ApiConfigs__DBConnection={{RDS_CONN}}",
                "docker run --rm -e ApiConfigs__DBConnection=$ApiConfigs__DBConnection \
                  -v ${TARGET_DIR}:/src \
                  mcr.microsoft.com/dotnet/sdk:8.0 \
                  bash -lc 'dotnet tool install -g dotnet-ef; export PATH=$PATH:/root/.dotnet/tools; cd /src/SettlyModels; dotnet ef database update --startup-project ../SettlyApi'"
              ]
            }
            JSON
            sed -i "s|{{RDS_CONN}}|${RDS_CONN}|g" /tmp/ssm-params.json
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets "Key=instanceIds,Values=${EC2_INSTANCE_ID}" \
              --parameters file:///tmp/ssm-params.json \
              --region "${AWS_REGION}"
          '''
        }
      }
    }

    stage('Deploy to EC2') {
      steps {
        sh '''
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          IMAGE="${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          aws ecr get-login-password --region ${AWS_REGION} \
            | docker login --username AWS --password-stdin ${REGISTRY}
          docker pull ${IMAGE}
          docker rm -f backend || true
          docker run -d --name backend --restart=always -p 80:80 ${IMAGE}
        '''
      }
    }
  }

  post {
    success { echo '✅ Backend 部署成功' }
    failure { echo '❌ Backend 流水线失败，请检查日志' }
    always { cleanWs() }
  }
}